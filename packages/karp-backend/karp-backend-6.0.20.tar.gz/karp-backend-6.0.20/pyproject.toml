[tool.poetry]
name = "karp-backend"
version = "6.0.20"
license = "MIT"
description = "Karp backend"
readme = "README.md"
authors = [
	"Spr√•kbanken at the University of Gothenburg <sb-info@svenska.gu.se>",
]
homepage = "https://spraakbanken.gu.se"

documentation = "https://github.com/spraakbanken/karp-backend"
repository = "https://github.com/spraakbanken/karp-backend"
classifiers = [
	"Development Status :: 2 - Pre-Alpha",
	"Intended Audience :: Developers",
	"License :: OSI Approved :: MIT License",
	"Operating System :: Unix",
	"Operating System :: POSIX",
	"Operating System :: Microsoft :: Windows",
	"Topic :: Utilities",
]
packages = [{ include = "karp" }]

[tool.poetry.scripts]
karp-cli = "karp.cliapp.main:cliapp"
# ; karp.modules =
# ;     health = "karp.webapp.health"_api
# ;     entries = "karp.webapp.views.entries"
# ;     resources = "karp.webapp.resources"_api
# ; 	history = "karp.webapp.views.history"
# ; 	stats = "karp.webapp.stats"_api
# ; 	query = "karp.webapp.query"_api
[tool.poetry.plugins."karp.infrastructure"]
"es6" = "karp.infrastructure.elasticsearch6"
"sql" = "karp.infrastructure.sql"
"testing" = "karp.infrastructure.testing"
"jwt" = "karp.infrastructure.jwt"

# [tool.poetry.plugins."karp.clicommands"]
# "db" = "karp.cliapp.subapp_database"
# "entries" = "karp.cliapp.subapp_entries"
# "entry_repo" = "karp.cliapp.subapp_entry_repo"
# "resource" = "karp.cliapp.subapp_resource"
# "query" = "karp.cliapp.subapps.query_subapp"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/spraakbanken/karp-backend/issues"

[tool.poetry.dependencies]
python = "^3.9"
json-streams = "^0.11"
paradigmextract = "^0.1.1"
pydantic = "^1.8.2"
PyJWT = {extras = ["crypto"], version = "^2.3.0"}
sb-json-tools = "^0.9.1"
SQLAlchemy = "^1.4.25"
sqlalchemy-json = "^0.4.0"
SQLAlchemy-Utils = "^0.38.2"
tabulate = "^0.8.9"
tenacity = "^8.0.1"
tqdm = "^4.62.3"
typer = "^0.4.0"
urllib3 = "^1.26.7"
uvicorn = "^0.17"
fastapi = "^0.75.0"
injector = "^0.19"
alembic = "^1.7.4"
regex = "^2021.9.30"
python-dotenv = "^0.19.0"
environs = "^9.3.4"
elasticsearch = "^6"
elasticsearch-dsl = "^6"
mysqlclient = { version = "^2.1.0", optional = true }
TatSu = "^5.6"
PyMySQL = { version = "^0.9", optional = true }
aiosqlite = { version = "^0.17.0", optional = true }
aiomysql = { version = "^0.0.22", optional = true }
structlog = "^21.5.0"
asgi-correlation-id = "^1.1.2"
gunicorn = "^20.1.0"
python-json-logger = "^2.0.2"
ulid-py = "^1.1.0"
Deprecated = "^1.2.13"

[tool.poetry.extras]
mysql = ["mysqlclient", "PyMySQL", "aiomysql"]
sqlite = ["aiosqlite"]

[tool.poetry.dev-dependencies]
flake8 = "^4.0.1"
autopep8 = "^1.5.7"
pytest = "^6.2.5"
pytest-cov = "^2.12.1"
mypy = "^0.910"
bump2version = "^1.0.1"
factory-boy = "^3.2.0"
requests = "^2.26.0"
isort = "^5.9.3"
flakehell = "^0.9.0"
wemake-python-styleguide = "^0.16"
elasticsearch-test-py = "^1.1.0"
cryptography = "^36.0.1"
types-tabulate = "^0.8.5"
vulture = "^2.3"
flake8-bandit = "^2.1.2"
pylint = "^2.12.2"
flake8-pylint = "^0.1.3"
black = "^22.3.0"

[tool.flakehell]
exclude = ["README.rst", "README.md"]
# format = "colored"
show_source = true
# whitelist = "../../allowlist.txt"
format = "grouped"
statistics = false
doctests = true
enable_extensions = "G"


accept_encodings = "utf-8"
max_complexity = 6
max_line_length = 88

ignore = "D100, D104, D401, W504, RST303, RST304, DAR103, DAR203"

extended_default_ignore = []

[tool.flakehell.exceptions."*/__init__.py"]
pycodestyle = ["-F401"]
pyflakes = ["-F401"]

[tool.flakehell.exceptions."karp/tests/*"]
pycodestyle = ["-D10*"]
pyflakes = ["-D10*"]
flake8-docstrings = ["-D10*"]

[tool.flakehell.plugins]
flake8-bandit = ["+*", "-S322"]
flake8-bugbear = ["+*"]
flake8-builtins = ["+*"]
flake8-comprehensions = ["+*"]
flake8-darglint = ["+*"]
flake8-docstrings = ["+*"]
flake8-eradicate = ["+*"]
flake8-isort = ["+*"]
flake8-mutable = ["+*"]
flake8-pytest-style = ["+*"]
flake8-spellcheck = ["+*"]
mccabe = ["+*"]
pep8-naming = ["+*"]
pycodestyle = ["+*"]
pyflakes = ["+*"]
pylint = ["+*"]
"wemake-python-styleguide" = ["+*", "-WPS306"]

[tool.vulture]
exclude = ["karp/tests/"]
min_confidence = 100
paths = ["karp"]
ignore_decorators = ["@abc.abstractmethod"]
