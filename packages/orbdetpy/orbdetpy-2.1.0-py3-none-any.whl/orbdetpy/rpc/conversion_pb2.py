# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: conversion.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
import orbdetpy.rpc.messages_pb2 as messages__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10\x63onversion.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x0emessages.proto2\xe2\x04\n\nConversion\x12\x38\n\x0etransformFrame\x12\x14.TransformFrameInput\x1a\x0e.Double2DArray\"\x00\x12\x32\n\x12\x63onvertAzElToRaDec\x12\x0c.AnglesInput\x1a\x0c.DoubleArray\"\x00\x12\x32\n\x12\x63onvertRaDecToAzEl\x12\x0c.AnglesInput\x1a\x0c.DoubleArray\"\x00\x12\x39\n\x0f\x63onvertLLAToPos\x12\x14.TransformFrameInput\x1a\x0e.Double2DArray\"\x00\x12\x39\n\x0f\x63onvertPosToLLA\x12\x14.TransformFrameInput\x1a\x0e.Double2DArray\"\x00\x12\x39\n\x0f\x63onvertElemToPv\x12\x14.TransformFrameInput\x1a\x0e.Double2DArray\"\x00\x12\x39\n\x0f\x63onvertPvToElem\x12\x14.TransformFrameInput\x1a\x0e.Double2DArray\"\x00\x12<\n\x0cgetUTCString\x12\x0c.DoubleArray\x1a\x1c.google.protobuf.StringValue\"\x00\x12\x43\n\x13getJ2000EpochOffset\x12\x1c.google.protobuf.StringValue\x1a\x0c.DoubleArray\"\x00\x12\x43\n\x12getEpochDifference\x12\r.IntegerArray\x1a\x1c.google.protobuf.DoubleValue\"\x00\x42%\n\x0eorg.astria.rpcB\x11\x43onversionRequestP\x00\x62\x06proto3')



_CONVERSION = DESCRIPTOR.services_by_name['Conversion']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\016org.astria.rpcB\021ConversionRequestP\000'
  _CONVERSION._serialized_start=69
  _CONVERSION._serialized_end=679
# @@protoc_insertion_point(module_scope)
