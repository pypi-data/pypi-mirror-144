/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/uuosio/go-uuoskit */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "lib.go"
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
 static char* get_p(char **pp, int i)
 {
	    return pp[i];
 }

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
// typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
// typedef float _Complex GoComplex64;
// typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void init_();
extern void say_hello_(char* name);
extern char* wallet_import_(char* name, char* priv);
extern bool wallet_remove_(char* name, char* pubKey);
extern char* wallet_get_public_keys_();
extern char* wallet_sign_digest_(char* digest, char* pubKey);
extern int64_t transaction_new_(int64_t expiration, char* refBlock, char* chainId);
extern char* transaction_from_json_(char* tx, char* chainId);
extern char* transaction_free_(int64_t _index);
extern char* transaction_set_chain_id_(int64_t _index, char* chainId);
extern char* transaction_add_action_(int64_t idx, char* account, char* name, char* data, char* permissions);
extern char* transaction_sign_(int64_t idx, char* pub);
extern char* transaction_digest_(int64_t idx, char* chainId);
extern char* transaction_sign_by_private_key_(int64_t idx, char* priv);
extern char* transaction_pack_(int64_t idx, int compress);
extern char* transaction_marshal_(int64_t idx);

//func (t *Transaction) Unpack(data []byte) (int, error) {
extern char* transaction_unpack_(char* data);
extern char* abiserializer_set_contract_abi_(char* account, char* abi, int length);
extern char* abiserializer_pack_action_args_(char* contractName, char* actionName, char* args, int args_len);
extern char* abiserializer_unpack_action_args_(char* contractName, char* actionName, char* args);
extern char* abiserializer_pack_abi_type_(char* contractName, char* actionName, char* args, int args_len);
extern char* abiserializer_unpack_abi_type_(char* contractName, char* actionName, char* args);
extern int abiserializer_is_abi_cached_(char* contractName);
extern uint64_t s2n_(char* s);
extern char* n2s_(uint64_t n);

//symbol to uint64
extern uint64_t sym2n_(char* str_symbol, uint64_t precision);
extern char* abiserializer_pack_abi_(char* str_abi);
extern char* abiserializer_unpack_abi_(char* abi, int length);
extern char* crypto_sign_digest_(char* digest, char* privateKey);
extern char* crypto_get_public_key_(char* privateKey, int eosPub);
extern char* crypto_recover_key_(char* digest, char* signature, int format);
extern char* crypto_create_key_(bool oldPubKeyFormat);
extern void set_debug_flag_(bool debug);
extern bool get_debug_flag_();

#ifdef __cplusplus
}
#endif
