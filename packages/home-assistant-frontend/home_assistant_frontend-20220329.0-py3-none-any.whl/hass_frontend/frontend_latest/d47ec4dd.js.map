{"version":3,"file":"d47ec4dd.js","mappings":";;;;AAMA;ACkCA;AAIA;;AAEA;AAGA;;;;AAMA;;;AAKA;;;;;AAMA;;;AAKA;;;;AAKA;;;AAIA;;;;AAIA;;;AAKA;AAEA;;AAGA;AACA;AAEA;;AAGA;;;;AAMA;;AAEA;;;;AAKA;AACA;;AAIA;;AAEA;;AAGA;AACA;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhHA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-update.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-markdown\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport {\n  updateIsInstalling,\n  UpdateEntity,\n  UPDATE_SUPPORT_BACKUP,\n  UPDATE_SUPPORT_INSTALL,\n  UPDATE_SUPPORT_PROGRESS,\n  UPDATE_SUPPORT_SPECIFIC_VERSION,\n} from \"../../../data/update\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-update\")\nclass MoreInfoUpdate extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: UpdateEntity;\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.stateObj ||\n      UNAVAILABLE_STATES.includes(this.stateObj.state)\n    ) {\n      return html``;\n    }\n\n    const skippedVersion =\n      this.stateObj.attributes.latest_version &&\n      this.stateObj.attributes.skipped_version ===\n        this.stateObj.attributes.latest_version;\n\n    return html`\n      ${this.stateObj.attributes.in_progress\n        ? supportsFeature(this.stateObj, UPDATE_SUPPORT_PROGRESS) &&\n          typeof this.stateObj.attributes.in_progress === \"number\"\n          ? html`<mwc-linear-progress\n              .progress=${this.stateObj.attributes.in_progress / 100}\n              buffer=\"\"\n            ></mwc-linear-progress>`\n          : html`<mwc-linear-progress indeterminate></mwc-linear-progress>`\n        : \"\"}\n      ${this.stateObj.attributes.title\n        ? html`<h3>${this.stateObj.attributes.title}</h3>`\n        : \"\"}\n\n      <div class=\"row\">\n        <div class=\"key\">\n          ${this.hass.localize(\n            \"ui.dialogs.more_info_control.update.current_version\"\n          )}\n        </div>\n        <div class=\"value\">\n          ${this.stateObj.attributes.current_version ??\n          this.hass.localize(\"state.default.unavailable\")}\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"key\">\n          ${this.hass.localize(\n            \"ui.dialogs.more_info_control.update.latest_version\"\n          )}\n        </div>\n        <div class=\"value\">\n          ${this.stateObj.attributes.latest_version ??\n          this.hass.localize(\"state.default.unavailable\")}\n        </div>\n      </div>\n\n      ${this.stateObj.attributes.release_url\n        ? html`<div class=\"row\">\n            <div class=\"key\">\n              <a\n                href=${this.stateObj.attributes.release_url}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.more_info_control.update.release_announcement\"\n                )}\n              </a>\n            </div>\n          </div>`\n        : \"\"}\n      ${this.stateObj.attributes.release_summary\n        ? html`<hr />\n            <ha-markdown\n              .content=${this.stateObj.attributes.release_summary}\n            ></ha-markdown> `\n        : \"\"}\n      ${supportsFeature(this.stateObj, UPDATE_SUPPORT_BACKUP)\n        ? html`<hr />\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_control.update.create_backup\"\n              )}\n            >\n              <ha-checkbox\n                checked\n                .disabled=${updateIsInstalling(this.stateObj)}\n              ></ha-checkbox>\n            </ha-formfield> `\n        : \"\"}\n      <hr />\n      <div class=\"actions\">\n        <mwc-button\n          @click=${this._handleSkip}\n          .disabled=${skippedVersion ||\n          this.stateObj.state === \"off\" ||\n          updateIsInstalling(this.stateObj)}\n        >\n          ${this.hass.localize(\"ui.dialogs.more_info_control.update.skip\")}\n        </mwc-button>\n        ${supportsFeature(this.stateObj, UPDATE_SUPPORT_INSTALL)\n          ? html`\n              <mwc-button\n                @click=${this._handleInstall}\n                .disabled=${(this.stateObj.state === \"off\" &&\n                  !skippedVersion) ||\n                updateIsInstalling(this.stateObj)}\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.more_info_control.update.install\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  get _shouldCreateBackup(): boolean | null {\n    if (!supportsFeature(this.stateObj!, UPDATE_SUPPORT_BACKUP)) {\n      return null;\n    }\n    const checkbox = this.shadowRoot?.querySelector(\"ha-checkbox\");\n    if (checkbox) {\n      return checkbox.checked;\n    }\n    return true;\n  }\n\n  private _handleInstall(): void {\n    const installData: Record<string, any> = {\n      entity_id: this.stateObj!.entity_id,\n    };\n\n    if (this._shouldCreateBackup) {\n      installData.backup = true;\n    }\n\n    if (\n      supportsFeature(this.stateObj!, UPDATE_SUPPORT_SPECIFIC_VERSION) &&\n      this.stateObj!.attributes.latest_version\n    ) {\n      installData.version = this.stateObj!.attributes.latest_version;\n    }\n\n    this.hass.callService(\"update\", \"install\", installData);\n  }\n\n  private _handleSkip(): void {\n    this.hass.callService(\"update\", \"skip\", {\n      entity_id: this.stateObj!.entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      hr {\n        border-color: var(--divider-color);\n        border-bottom: none;\n        margin: 16px 0;\n      }\n      ha-expansion-panel {\n        margin: 16px 0;\n      }\n      .row {\n        margin: 0;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n      }\n      .actions {\n        margin: 8px 0 0;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n      }\n\n      .actions mwc-button {\n        margin: 0 4px 4px;\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-update\": MoreInfoUpdate;\n  }\n}\n"],"names":[],"sourceRoot":""}