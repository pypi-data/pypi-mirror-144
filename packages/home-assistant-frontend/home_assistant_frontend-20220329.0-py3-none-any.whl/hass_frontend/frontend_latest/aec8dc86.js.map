{"version":3,"file":"aec8dc86.js","mappings":";;AAsFA;;;AAGA;AAIA;ACpDA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;ACVA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;ACfA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;ACjBA;;;;ACDA;;ACQA;;;;;;;AANA;;;ACsDA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;AAOA;;;AA3BA","sources":["webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/mwc-check-list-item-base.ts","webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/statistics/dialog-statistics-adjust-sum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox';\n\nimport {Checkbox} from '@material/mwc-checkbox';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n      }\n      [dir=\"rtl\"].header_button {\n        right: auto;\n        left: 16px;\n      }\n      [dir=\"rtl\"].header_title {\n        margin-left: 40px;\n        margin-right: 0px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n      }\n      :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n        margin-left: 10px;\n        margin-right: auto;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { LitElement, TemplateResult, html, CSSResultGroup } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../components/ha-dialog\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-radio\";\nimport \"../../../components/ha-form/ha-form\";\nimport type { DialogStatisticsAdjustSumParams } from \"./show-dialog-statistics-adjust-sum\";\nimport type {\n  HaFormBaseSchema,\n  HaFormSchema,\n} from \"../../../components/ha-form/types\";\nimport { adjustStatisticsSum } from \"../../../data/history\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { showToast } from \"../../../util/toast\";\n\nlet lastMoment: string | undefined;\n\n@customElement(\"dialog-statistics-adjust-sum\")\nexport class DialogStatisticsFixUnsupportedUnitMetadata extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogStatisticsAdjustSumParams;\n\n  @state() private _data?: {\n    moment: string;\n    amount: number;\n  };\n\n  @state() private _busy = false;\n\n  public showDialog(params: DialogStatisticsAdjustSumParams): void {\n    this._params = params;\n    this._busy = false;\n    const now = new Date();\n    this._data = {\n      moment:\n        lastMoment ||\n        `${now.getFullYear()}-${\n          now.getMonth() + 1\n        }-${now.getDate()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`,\n      amount: 0,\n    };\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        heading=\"Adjust sum for a specific time.\"\n      >\n        <ha-form\n          .hass=${this.hass}\n          .schema=${this._getSchema(this._params.statistic)}\n          .data=${this._data}\n          .computeLabel=${this._computeLabel}\n          .disabled=${this._busy}\n          @value-changed=${this._valueChanged}\n        ></ha-form>\n\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._fixIssue}\n          dialogInitialFocus\n          label=\"Adjust\"\n        ></mwc-button>\n        <mwc-button\n          slot=\"secondaryAction\"\n          dialogAction=\"cancel\"\n          .label=${this.hass.localize(\"ui.common.close\")}\n        ></mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _getSchema = memoizeOne((statistic): HaFormSchema[] => [\n    {\n      type: \"constant\",\n      name: \"name\",\n      value: statistic.name || statistic.statistic_id,\n    },\n    {\n      name: \"moment\",\n      required: true,\n      selector: {\n        datetime: {},\n      },\n    },\n    {\n      name: \"amount\",\n      required: true,\n      default: 0,\n      selector: {\n        number: {\n          mode: \"box\",\n          step: 0.1,\n          unit_of_measurement: statistic.unit_of_measurement,\n        },\n      },\n    },\n  ]);\n\n  private _computeLabel(value: HaFormBaseSchema) {\n    switch (value.name) {\n      case \"name\":\n        return \"Statistic\";\n      case \"moment\":\n        return \"Moment to adjust\";\n      case \"amount\":\n        return \"Amount\";\n      default:\n        return value.name;\n    }\n  }\n\n  private _valueChanged(ev) {\n    this._data = ev.detail.value;\n  }\n\n  private async _fixIssue(): Promise<void> {\n    this._busy = true;\n    try {\n      await adjustStatisticsSum(\n        this.hass,\n        this._params!.statistic.statistic_id,\n        this._data!.moment,\n        this._data!.amount\n      );\n    } catch (err: any) {\n      this._busy = false;\n      showAlertDialog(this, {\n        text: `Error adjusting sum: ${err.message || err}`,\n      });\n      return;\n    }\n    showToast(this, {\n      message: \"Statistic sum adjusted\",\n    });\n    lastMoment = this._data!.moment;\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, haStyleDialog];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-statistics-adjust-sum\": DialogStatisticsFixUnsupportedUnitMetadata;\n  }\n}\n"],"names":[],"sourceRoot":""}