{"version":3,"file":"a488a83a.js","mappings":";;AAsFA;;;AAGA;AAIA;ACpDA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AC2DA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;AA3FA;;;;AAAA","sources":["webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/mwc-check-list-item-base.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-groups-dashboard.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox';\n\nimport {Checkbox} from '@material/mwc-checkbox';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../../common/navigate\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-fab\";\nimport \"../../../../../components/ha-icon-button\";\nimport { fetchGroups, ZHADevice, ZHAGroup } from \"../../../../../data/zha\";\nimport \"../../../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../../../types\";\nimport { formatAsPaddedHex, sortZHAGroups } from \"./functions\";\nimport { zhaTabs } from \"./zha-config-dashboard\";\n\nexport interface GroupRowData extends ZHAGroup {\n  group?: GroupRowData;\n  id?: string;\n}\n\n@customElement(\"zha-groups-dashboard\")\nexport class ZHAGroupsDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property() public _groups: ZHAGroup[] = [];\n\n  private _firstUpdatedCalled = false;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hass && this._firstUpdatedCalled) {\n      this._fetchGroups();\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this._fetchGroups();\n    }\n    this._firstUpdatedCalled = true;\n  }\n\n  private _formattedGroups = memoizeOne((groups: ZHAGroup[]) => {\n    let outputGroups: GroupRowData[] = groups;\n\n    outputGroups = outputGroups.map((group) => ({\n      ...group,\n      id: String(group.group_id),\n    }));\n\n    return outputGroups;\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Group\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.groups\"),\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n            group_id: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.group_id\"),\n              type: \"numeric\",\n              width: \"15%\",\n              template: (groupId: number) =>\n                html` ${formatAsPaddedHex(groupId)} `,\n              sortable: true,\n            },\n            members: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.members\"),\n              type: \"numeric\",\n              width: \"15%\",\n              template: (members: ZHADevice[]) => html` ${members.length} `,\n              sortable: true,\n            },\n          }\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .tabs=${zhaTabs}\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._formattedGroups(this._groups)}\n        @row-click=${this._handleRowClicked}\n        clickable\n      >\n        <a href=\"/config/zha/group-add\" slot=\"fab\">\n          <ha-fab\n            .label=${this.hass!.localize(\n              \"ui.panel.config.zha.groups.add_group\"\n            )}\n            extended\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private async _fetchGroups() {\n    this._groups = (await fetchGroups(this.hass!)).sort(sortZHAGroups);\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const groupId = ev.detail.id;\n    navigate(`/config/zha/group/${groupId}`);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        a {\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-groups-dashboard\": ZHAGroupsDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}