{"version":3,"file":"lib_index_js.26d015b535cd2d57fedf.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,kBAAkB,mBAAO,CAAC,wEAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;ACzCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,wBAAwB,mBAAO,CAAC,4FAA2B;AAC3D,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,2BAA2B,mBAAO,CAAC,qDAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mCAAmC;AAC3H;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAe;AACf","sources":["webpack://@elyra/code-viewer-extension/./lib/CodeViewerWidget.js","webpack://@elyra/code-viewer-extension/./lib/index.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2018-2022 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeViewerWidget = void 0;\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst widgets_1 = require(\"@lumino/widgets\");\nclass CodeViewerWidget extends widgets_1.Widget {\n    /**\n     * Construct a new text viewer widget.\n     */\n    constructor(options) {\n        super();\n        this.model = new codeeditor_1.CodeEditor.Model({\n            value: options.content,\n            mimeType: options.mimeType\n        });\n        const editorWidget = (this.editorWidget = new codeeditor_1.CodeEditorWrapper({\n            factory: options.factory,\n            model: this.model\n        }));\n        this.editor = editorWidget.editor;\n        this.editor.setOption('readOnly', true);\n        const layout = (this.layout = new widgets_1.StackedLayout());\n        layout.addWidget(editorWidget);\n    }\n}\nexports.CodeViewerWidget = CodeViewerWidget;\n//# sourceMappingURL=CodeViewerWidget.js.map","\"use strict\";\n/*\n * Copyright 2018-2022 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst ui_components_1 = require(\"@jupyterlab/ui-components\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst CodeViewerWidget_1 = require(\"./CodeViewerWidget\");\nconst ELYRA_CODE_VIEWER_NAMESPACE = 'elyra-code-viewer-extension';\n/**\n * The command IDs used by the code-viewer plugin.\n */\nconst CommandIDs = {\n    openViewer: 'elyra-code-viewer:open'\n};\n/**\n * Initialization data for the code-viewer extension.\n */\nconst extension = {\n    id: ELYRA_CODE_VIEWER_NAMESPACE,\n    autoStart: true,\n    requires: [codeeditor_1.IEditorServices],\n    activate: (app, editorServices) => {\n        console.log('Elyra - code-viewer extension is activated!');\n        const openCodeViewer = (args) => {\n            var _a;\n            const func = editorServices.factoryService.newDocumentEditor;\n            const factory = options => {\n                return func(options);\n            };\n            // Derive mimetype from extension\n            let mimetype = args.mimeType;\n            if (!mimetype && args.extension) {\n                mimetype = editorServices.mimeTypeService.getMimeTypeByFilePath(`temp.${args.extension.replace(/\\\\.$/, '')}`);\n            }\n            const widget = new CodeViewerWidget_1.CodeViewerWidget({\n                factory,\n                content: args.content,\n                mimeType: mimetype\n            });\n            widget.title.label = args.label || 'Code Viewer';\n            widget.title.caption = widget.title.label;\n            // Get the fileType based on the mimetype to determine the icon\n            const fileType = algorithm_1.toArray(app.docRegistry.fileTypes()).find(fileType => {\n                return mimetype ? fileType.mimeTypes.includes(mimetype) : undefined;\n            });\n            widget.title.icon = (_a = fileType === null || fileType === void 0 ? void 0 : fileType.icon) !== null && _a !== void 0 ? _a : ui_components_1.textEditorIcon;\n            const main = new apputils_1.MainAreaWidget({ content: widget });\n            app.shell.add(main, 'main');\n        };\n        app.commands.addCommand(CommandIDs.openViewer, {\n            execute: (args) => {\n                openCodeViewer(args);\n            }\n        });\n    }\n};\nexports.default = extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}