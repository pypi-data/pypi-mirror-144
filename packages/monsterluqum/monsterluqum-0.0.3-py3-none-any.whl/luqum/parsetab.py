
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOR_OPleftAND_OPleftNOTN_OPnonassocMINUSnonassocPLUSnonassocAPPROXnonassocBOOSTnonassocLPARENRPARENnonassocLBRACKETTORBRACKETnonassocREGEXnonassocPHRASEnonassocTERMAND_OP APPROX BOOST COLUMN LBRACKET LPAREN MINUS NOT NOTN_OP OR_OP PHRASE PLUS RBRACKET REGEX RPAREN TERM TOexpression : expression OR_OP expressionexpression : expression AND_OP expressionexpression : expression NOTN_OP expressionexpression : expression expressionunary_expression : PLUS unary_expressionunary_expression : MINUS unary_expressionunary_expression : NOT unary_expressionexpression : unary_expressionunary_expression : LPAREN expression RPARENunary_expression : LBRACKET phrase_or_term TO phrase_or_term RBRACKETunary_expression : TERM COLUMN unary_expressionunary_expression : PHRASEunary_expression : PHRASE APPROXexpression : expression BOOSTunary_expression : TERMunary_expression : TERM APPROXunary_expression : REGEXunary_expression : TOphrase_or_term : TERM\n                      | PHRASE'
    
_lr_action_items = {'PLUS':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,32,34,],[3,3,-8,3,3,3,3,-18,-15,-12,-17,3,3,3,3,-14,-5,-6,-7,3,3,-16,-13,3,3,3,-9,-11,-10,]),'MINUS':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,32,34,],[4,4,-8,4,4,4,4,-18,-15,-12,-17,4,4,4,4,-14,-5,-6,-7,4,4,-16,-13,4,4,4,-9,-11,-10,]),'NOT':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,32,34,],[5,5,-8,5,5,5,5,-18,-15,-12,-17,5,5,5,5,-14,-5,-6,-7,5,5,-16,-13,-1,-2,-3,-9,-11,-10,]),'LPAREN':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,32,34,],[6,6,-8,6,6,6,6,-18,-15,-12,-17,6,6,6,6,-14,-5,-6,-7,6,6,-16,-13,6,6,6,-9,-11,-10,]),'LBRACKET':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,32,34,],[7,7,-8,7,7,7,7,-18,-15,-12,-17,7,7,7,7,-14,-5,-6,-7,7,7,-16,-13,7,7,7,-9,-11,-10,]),'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,31,32,34,],[9,9,-8,9,9,9,9,22,-18,-15,-12,-17,9,9,9,9,-14,-5,-6,-7,9,9,-16,-13,9,9,9,-9,22,-11,-10,]),'PHRASE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,31,32,34,],[10,10,-8,10,10,10,10,23,-18,-15,-12,-17,10,10,10,10,-14,-5,-6,-7,10,10,-16,-13,10,10,10,-9,23,-11,-10,]),'REGEX':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,32,34,],[11,11,-8,11,11,11,11,-18,-15,-12,-17,11,11,11,11,-14,-5,-6,-7,11,11,-16,-13,11,11,11,-9,-11,-10,]),'TO':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,],[8,8,-8,8,8,8,8,-18,-15,-12,-17,8,8,8,8,-14,-5,-6,-7,8,31,-19,-20,8,-16,-13,8,8,8,-9,-11,-10,]),'$end':([1,2,8,9,10,11,12,16,17,18,19,25,26,27,28,29,30,32,34,],[0,-8,-18,-15,-12,-17,-4,-14,-5,-6,-7,-16,-13,-1,-2,-3,-9,-11,-10,]),'OR_OP':([1,2,8,9,10,11,12,16,17,18,19,20,25,26,27,28,29,30,32,34,],[13,-8,-18,-15,-12,-17,13,-14,-5,-6,-7,13,-16,-13,-1,-2,-3,-9,-11,-10,]),'AND_OP':([1,2,8,9,10,11,12,16,17,18,19,20,25,26,27,28,29,30,32,34,],[14,-8,-18,-15,-12,-17,14,-14,-5,-6,-7,14,-16,-13,14,-2,-3,-9,-11,-10,]),'NOTN_OP':([1,2,8,9,10,11,12,16,17,18,19,20,25,26,27,28,29,30,32,34,],[15,-8,-18,-15,-12,-17,15,-14,-5,-6,-7,15,-16,-13,15,15,-3,-9,-11,-10,]),'BOOST':([1,2,8,9,10,11,12,16,17,18,19,20,25,26,27,28,29,30,32,34,],[16,-8,-18,-15,-12,-17,16,-14,-5,-6,-7,16,-16,-13,16,16,16,-9,-11,-10,]),'RPAREN':([2,8,9,10,11,12,16,17,18,19,20,25,26,27,28,29,30,32,34,],[-8,-18,-15,-12,-17,-4,-14,-5,-6,-7,30,-16,-13,-1,-2,-3,-9,-11,-10,]),'COLUMN':([9,],[24,]),'APPROX':([9,10,],[25,26,]),'RBRACKET':([22,23,33,],[-19,-20,34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,6,12,13,14,15,20,27,28,29,],[1,12,20,12,27,28,29,12,12,12,12,]),'unary_expression':([0,1,3,4,5,6,12,13,14,15,20,24,27,28,29,],[2,2,17,18,19,2,2,2,2,2,2,32,2,2,2,]),'phrase_or_term':([7,31,],[21,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OR_OP expression','expression',3,'p_expression_or','parser.py',242),
  ('expression -> expression AND_OP expression','expression',3,'p_expression_and','parser.py',248),
  ('expression -> expression NOTN_OP expression','expression',3,'p_expression_notn','parser.py',253),
  ('expression -> expression expression','expression',2,'p_expression_implicit','parser.py',258),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',264),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',270),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_expression_not','parser.py',276),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',282),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',287),
  ('unary_expression -> LBRACKET phrase_or_term TO phrase_or_term RBRACKET','unary_expression',5,'p_range','parser.py',293),
  ('unary_expression -> TERM COLUMN unary_expression','unary_expression',3,'p_field_search','parser.py',301),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',310),
  ('unary_expression -> PHRASE APPROX','unary_expression',2,'p_proximity','parser.py',315),
  ('expression -> expression BOOST','expression',2,'p_boosting','parser.py',321),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',327),
  ('unary_expression -> TERM APPROX','unary_expression',2,'p_fuzzy','parser.py',332),
  ('unary_expression -> REGEX','unary_expression',1,'p_regex','parser.py',338),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',344),
  ('phrase_or_term -> TERM','phrase_or_term',1,'p_phrase_or_term','parser.py',350),
  ('phrase_or_term -> PHRASE','phrase_or_term',1,'p_phrase_or_term','parser.py',351),
]
