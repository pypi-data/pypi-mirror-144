# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/byo/v1/byo_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class Region(betterproto.Enum):
    NOT_DEFINED = 0
    US = 1
    NON_US = 2


class ReportType(betterproto.Enum):
    ONE_TIME = 0
    RECURRING = 1


class ReportStatus(betterproto.Enum):
    Undefined = 0
    Pending = 1
    Running = 2
    Succeeded = 3
    Failed = 4
    Archived = 5


@dataclass(eq=False, repr=False)
class LatLonToPolygonRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    point_radii: List["PointRadius"] = betterproto.message_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LatLonToPolygonResponse(betterproto.Message):
    pois: List["PointOfInterestFromLookup"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexToUnacatRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    report_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexToUnacatResponse(betterproto.Message):
    metric_id: List[str] = betterproto.string_field(1)
    unacat_ref: List[str] = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateGeometryRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    poi_collection_reference: str = betterproto.string_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsRequest(betterproto.Message):
    regions: List["Region"] = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsResponse(betterproto.Message):
    metric_refs_regions: List["MetricReferenceForRegion"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(1)
    foreign_collection_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionResponse(betterproto.Message):
    collection_reference_combined: str = betterproto.string_field(1)
    collection_version_id: str = betterproto.string_field(2)
    storage_reference: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class InitChunkedCollectionUploadRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class InitChunkedCollectionUploadResponse(betterproto.Message):
    chunk_ref: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendCollectionChunkRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    chunk_ref: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendCollectionChunkResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateStoredCollectionFromChunksRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    chunk_ref: str = betterproto.string_field(2)
    foreign_collection_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportFromStoredCollectionRequest(betterproto.Message):
    report_type: "ReportType" = betterproto.enum_field(8)
    report_name: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    client_name: str = betterproto.string_field(6)
    poi_collection_reference: str = betterproto.string_field(7)
    region: "Region" = betterproto.enum_field(9)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportFromPassedCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    pois: List["PointOfInterest"] = betterproto.message_field(6)
    region: "Region" = betterproto.enum_field(9)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReadMetricReportRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(3)
    metric_id: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReferenceForRegion(betterproto.Message):
    region: "Region" = betterproto.enum_field(1)
    metric_refs: List["MetricReference"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricReference(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    metric_category: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Period(betterproto.Message):
    start: "__unatype__.Date" = betterproto.message_field(1)
    end: "__unatype__.Date" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointOfInterest(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointOfInterestFromLookup(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(2)
    area_contruction_method: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PolygonRing(betterproto.Message):
    coordinates: List["Coordinate"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lon: str = betterproto.string_field(1)
    lat: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PrepareReportResponse(betterproto.Message):
    metrics_on_pois: List["PreparedMetricOnPois"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PreparedMetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    result_token: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateReportResponse(betterproto.Message):
    metrics_on_pois: List["MetricOnPois"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListReportsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListReportsResponse(betterproto.Message):
    reports: List["ReportDetails"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportDetailsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportDetails(betterproto.Message):
    report_type: "ReportType" = betterproto.enum_field(13)
    report_id: str = betterproto.string_field(1)
    report_name: str = betterproto.string_field(2)
    client_name: str = betterproto.string_field(12)
    report_status: "ReportStatus" = betterproto.enum_field(3)
    created_by: str = betterproto.string_field(4)
    created_time: int = betterproto.int64_field(5)
    expiry_time: int = betterproto.int64_field(6)
    item_count: int = betterproto.int64_field(14)
    storage_reference: str = betterproto.string_field(15)
    observation_period: "Period" = betterproto.message_field(7)
    region: "Region" = betterproto.enum_field(8)
    metrics: List[str] = betterproto.string_field(9)
    billing_context: str = betterproto.string_field(10)
    poi_collection_reference: str = betterproto.string_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReportValidation(betterproto.Message):
    csv_result: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    csv_result: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetricValuesOnPois(betterproto.Message):
    # ReportID + MetricID ?
    metric_version: "__v2_metric__.MetricVersion" = betterproto.message_field(1)
    values: List["__v2_metric__.MetricValue"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PointRadius(betterproto.Message):
    name: str = betterproto.string_field(1)
    coordinate: "Coordinate" = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DraftReport(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    info: str = betterproto.string_field(2)
    details: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DraftReportInfo(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    info: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListDraftReportsResponse(betterproto.Message):
    reports: List["DraftReportInfo"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DraftReportIdentifier(betterproto.Message):
    report_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class ByoServiceStub(betterproto.ServiceStub):
    async def create_stored_collection(
        self,
        *,
        billing_context: str = "",
        pois: Optional[List["PointOfInterest"]] = None,
        foreign_collection_id: str = "",
        display_name: str = "",
    ) -> "CreateStoredCollectionResponse":
        pois = pois or []

        request = CreateStoredCollectionRequest()
        request.billing_context = billing_context
        if pois is not None:
            request.pois = pois
        request.foreign_collection_id = foreign_collection_id
        request.display_name = display_name

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollection",
            request,
            CreateStoredCollectionResponse,
        )

    async def init_chunked_collection_upload(
        self, *, billing_context: str = ""
    ) -> "InitChunkedCollectionUploadResponse":

        request = InitChunkedCollectionUploadRequest()
        request.billing_context = billing_context

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/InitChunkedCollectionUpload",
            request,
            InitChunkedCollectionUploadResponse,
        )

    async def append_collection_chunk(
        self,
        *,
        billing_context: str = "",
        chunk_ref: str = "",
        pois: Optional[List["PointOfInterest"]] = None,
    ) -> "AppendCollectionChunkResponse":
        pois = pois or []

        request = AppendCollectionChunkRequest()
        request.billing_context = billing_context
        request.chunk_ref = chunk_ref
        if pois is not None:
            request.pois = pois

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/AppendCollectionChunk",
            request,
            AppendCollectionChunkResponse,
        )

    async def create_stored_collection_from_chunks(
        self,
        *,
        billing_context: str = "",
        chunk_ref: str = "",
        foreign_collection_id: str = "",
        display_name: str = "",
    ) -> "CreateStoredCollectionResponse":

        request = CreateStoredCollectionFromChunksRequest()
        request.billing_context = billing_context
        request.chunk_ref = chunk_ref
        request.foreign_collection_id = foreign_collection_id
        request.display_name = display_name

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollectionFromChunks",
            request,
            CreateStoredCollectionResponse,
        )

    async def create_report_from_passed_collection(
        self,
        *,
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        pois: Optional[List["PointOfInterest"]] = None,
        region: "Region" = None,
    ) -> "CreateReportResponse":
        metric_refs = metric_refs or []
        pois = pois or []

        request = CreateReportFromPassedCollectionRequest()
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        if pois is not None:
            request.pois = pois
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateReportFromPassedCollection",
            request,
            CreateReportResponse,
        )

    async def create_report_from_stored_collection(
        self,
        *,
        report_type: "ReportType" = None,
        report_name: str = "",
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        client_name: str = "",
        poi_collection_reference: str = "",
        region: "Region" = None,
    ) -> "CreateReportResponse":
        metric_refs = metric_refs or []

        request = CreateReportFromStoredCollectionRequest()
        request.report_type = report_type
        request.report_name = report_name
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        request.client_name = client_name
        request.poi_collection_reference = poi_collection_reference
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateReportFromStoredCollection",
            request,
            CreateReportResponse,
        )

    async def prepare_report_from_stored_collection(
        self,
        *,
        report_type: "ReportType" = None,
        report_name: str = "",
        billing_context: str = "",
        observation_period: "Period" = None,
        metric_refs: Optional[List["MetricReference"]] = None,
        client_name: str = "",
        poi_collection_reference: str = "",
        region: "Region" = None,
    ) -> "ReportDetails":
        metric_refs = metric_refs or []

        request = CreateReportFromStoredCollectionRequest()
        request.report_type = report_type
        request.report_name = report_name
        request.billing_context = billing_context
        if observation_period is not None:
            request.observation_period = observation_period
        if metric_refs is not None:
            request.metric_refs = metric_refs
        request.client_name = client_name
        request.poi_collection_reference = poi_collection_reference
        request.region = region

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/PrepareReportFromStoredCollection",
            request,
            ReportDetails,
        )

    async def read_metric_report(
        self, *, billing_context: str = "", report_id: str = "", metric_id: str = ""
    ) -> "MetricOnPois":

        request = ReadMetricReportRequest()
        request.billing_context = billing_context
        request.report_id = report_id
        request.metric_id = metric_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadMetricReport", request, MetricOnPois
        )

    async def read_metric_report2(
        self, *, billing_context: str = "", report_id: str = "", metric_id: str = ""
    ) -> "MetricValuesOnPois":

        request = ReadMetricReportRequest()
        request.billing_context = billing_context
        request.report_id = report_id
        request.metric_id = metric_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadMetricReport2", request, MetricValuesOnPois
        )

    async def list_reports(self, *, billing_context: str = "") -> "ListReportsResponse":

        request = ListReportsRequest()
        request.billing_context = billing_context

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListReports", request, ListReportsResponse
        )

    async def get_report_details(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "ReportDetails":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetReportDetails", request, ReportDetails
        )

    async def read_report_validation(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "ReportValidation":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadReportValidation", request, ReportValidation
        )

    async def archive_metric_report(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = ReportDetailsRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ArchiveMetricReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_metrics(
        self, *, regions: Optional[List["Region"]] = None
    ) -> "ListMetricsResponse":
        regions = regions or []

        request = ListMetricsRequest()
        request.regions = regions

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListMetrics", request, ListMetricsResponse
        )

    async def lat_lon_to_polygon(
        self,
        *,
        billing_context: str = "",
        point_radii: Optional[List["PointRadius"]] = None,
    ) -> "LatLonToPolygonResponse":
        point_radii = point_radii or []

        request = LatLonToPolygonRequest()
        request.billing_context = billing_context
        if point_radii is not None:
            request.point_radii = point_radii

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/LatLonToPolygon",
            request,
            LatLonToPolygonResponse,
        )

    async def index_to_unacat(
        self, *, billing_context: str = "", report_id: str = ""
    ) -> "IndexToUnacatResponse":

        request = IndexToUnacatRequest()
        request.billing_context = billing_context
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/IndexToUnacat", request, IndexToUnacatResponse
        )

    async def validate_geometry(
        self, *, billing_context: str = "", poi_collection_reference: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = ValidateGeometryRequest()
        request.billing_context = billing_context
        request.poi_collection_reference = poi_collection_reference

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ValidateGeometry",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_draft_reports(self) -> "ListDraftReportsResponse":

        request = betterproto_lib_google_protobuf.Empty()

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListDraftReports",
            request,
            ListDraftReportsResponse,
        )

    async def get_draft_report(self, *, report_id: str = "") -> "DraftReport":

        request = DraftReportIdentifier()
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetDraftReport", request, DraftReport
        )

    async def store_draft_report(
        self, *, report_id: str = "", info: str = "", details: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DraftReport()
        request.report_id = report_id
        request.info = info
        request.details = details

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/StoreDraftReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def delete_draft_report(
        self, *, report_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DraftReportIdentifier()
        request.report_id = report_id

        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/DeleteDraftReport",
            request,
            betterproto_lib_google_protobuf.Empty,
        )


from ... import unatype as __unatype__
from ...v2 import metric as __v2_metric__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
