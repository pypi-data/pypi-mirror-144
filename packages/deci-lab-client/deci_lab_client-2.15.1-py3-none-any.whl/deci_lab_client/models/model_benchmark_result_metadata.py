# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, In your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class ModelBenchmarkResultMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_size': 'int',
        'batch_inf_time': 'float',
        'batch_inf_time_variance': 'float',
        'memory': 'float',
        'throughput': 'float',
        'sample_inf_time': 'float',
        'error': 'str'
    }

    attribute_map = {
        'batch_size': 'batchSize',
        'batch_inf_time': 'batchInfTime',
        'batch_inf_time_variance': 'batchInfTimeVariance',
        'memory': 'memory',
        'throughput': 'throughput',
        'sample_inf_time': 'sampleInfTime',
        'error': 'error'
    }

    def __init__(self, batch_size=None, batch_inf_time=None, batch_inf_time_variance=None, memory=None, throughput=None, sample_inf_time=None, error=None, local_vars_configuration=None):  # noqa: E501
        """ModelBenchmarkResultMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch_size = None
        self._batch_inf_time = None
        self._batch_inf_time_variance = None
        self._memory = None
        self._throughput = None
        self._sample_inf_time = None
        self._error = None
        self.discriminator = None

        if batch_size is not None:
            self.batch_size = batch_size
        if batch_inf_time is not None:
            self.batch_inf_time = batch_inf_time
        if batch_inf_time_variance is not None:
            self.batch_inf_time_variance = batch_inf_time_variance
        if memory is not None:
            self.memory = memory
        if throughput is not None:
            self.throughput = throughput
        if sample_inf_time is not None:
            self.sample_inf_time = sample_inf_time
        if error is not None:
            self.error = error

    @property
    def batch_size(self):
        """Gets the batch_size of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The batch_size of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this ModelBenchmarkResultMetadata.


        :param batch_size: The batch_size of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def batch_inf_time(self):
        """Gets the batch_inf_time of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The batch_inf_time of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: float
        """
        return self._batch_inf_time

    @batch_inf_time.setter
    def batch_inf_time(self, batch_inf_time):
        """Sets the batch_inf_time of this ModelBenchmarkResultMetadata.


        :param batch_inf_time: The batch_inf_time of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: float
        """

        self._batch_inf_time = batch_inf_time

    @property
    def batch_inf_time_variance(self):
        """Gets the batch_inf_time_variance of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The batch_inf_time_variance of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: float
        """
        return self._batch_inf_time_variance

    @batch_inf_time_variance.setter
    def batch_inf_time_variance(self, batch_inf_time_variance):
        """Sets the batch_inf_time_variance of this ModelBenchmarkResultMetadata.


        :param batch_inf_time_variance: The batch_inf_time_variance of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: float
        """

        self._batch_inf_time_variance = batch_inf_time_variance

    @property
    def memory(self):
        """Gets the memory of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The memory of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ModelBenchmarkResultMetadata.


        :param memory: The memory of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: float
        """

        self._memory = memory

    @property
    def throughput(self):
        """Gets the throughput of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The throughput of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: float
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this ModelBenchmarkResultMetadata.


        :param throughput: The throughput of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: float
        """

        self._throughput = throughput

    @property
    def sample_inf_time(self):
        """Gets the sample_inf_time of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The sample_inf_time of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: float
        """
        return self._sample_inf_time

    @sample_inf_time.setter
    def sample_inf_time(self, sample_inf_time):
        """Sets the sample_inf_time of this ModelBenchmarkResultMetadata.


        :param sample_inf_time: The sample_inf_time of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: float
        """

        self._sample_inf_time = sample_inf_time

    @property
    def error(self):
        """Gets the error of this ModelBenchmarkResultMetadata.  # noqa: E501


        :return: The error of this ModelBenchmarkResultMetadata.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ModelBenchmarkResultMetadata.


        :param error: The error of this ModelBenchmarkResultMetadata.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelBenchmarkResultMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelBenchmarkResultMetadata):
            return True

        return self.to_dict() != other.to_dict()
