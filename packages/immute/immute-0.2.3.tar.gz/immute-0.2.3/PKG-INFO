Metadata-Version: 2.1
Name: immute
Version: 0.2.3
Summary: Create immutable python classes
Home-page: https://github.com/fitzypop/immute
License: MIT
Author: fitzypop
Author-email: fitzypop@pm.me
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Project-URL: Repository, https://github.com/fitzypop/immute
Description-Content-Type: text/markdown

# Immute

Create "immutable" classes in python.

I created a simple python object that, when inherited in another class, will prevent assignment operations outside the `__init__()` method.

**Note: DOES NOT CREATE TRUELY IMMUTABLE REFERENCES**

Classes inheriting from `Immutable` are not immutable references, only immutable from assignments, reassignment and deletion operations.

Classes inheriting from `Immutable` are still mutable reference types, and not truly immutable like python's built-in types (int, float, bool, str, tuples).

## Example

```python
from immute import Immutable

class Thing(Immutable):
    def __init__(self) -> None:
        self.num = 42

thing = Thing()

thing.num = 21
# ^^^^^^ This will raise a TypeError exception
```

