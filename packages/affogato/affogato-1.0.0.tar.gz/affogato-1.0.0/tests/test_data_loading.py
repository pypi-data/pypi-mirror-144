import numpy as np
from affogato.data import labeled_image_directory, numpy_file, save_numpy_file


def get_label_number(label: np.ndarray) -> int:
    """
    Get the label number from a label vector.
    """
    # Find the indx of the maximum value
    return int(np.argmax(label))


def test_loading_labeled_image_directory_labels():
    """
    Test the `labeled_image_directory` function - Make sure the labels are correct.
    Uses a subset of the MNIST dataset.
    """
    DIRECTORY = "./tests/small_mnist"

    data = labeled_image_directory(DIRECTORY, verbose=True)
    
    # Check the amount of labels
    labels = [get_label_number(label) for _, label in data]
    for i in range(10):
        assert labels.count(i) == 2


def test_loading_labeled_image_directory_shapes():
    """
    Test the shaep of inputs generated by `labeled_image_directory` 
    Uses a subset of the MNIST dataset.
    """
    DIRECTORY = "./tests/small_mnist"

    data = labeled_image_directory(DIRECTORY, verbose=True)
    
    # Check the the input shape
    assert data[0][0].shape == (1, 28, 28, 3)


def test_numpy_file_saving():
    """
    Tests the `numpy_file` function.
    
    Checks that when saving and loading, the data is the same.
    """

    path = "./tests/numpy_file.npz"

    # Create some fake data
    data = [
        # (input, label)
        (np.array([[[1, 2], [3, 4]]]), np.array([[0]])),
        (np.array([[[9, 10], [11, 12]]]), np.array([[2]])),
        (np.array([[[5, 6], [7, 8]]]), np.array([[1]])),
        (np.array([[[13, 14], [15, 16]]]), np.array([[2]])),
    ]

    # Save the data
    import pathlib
    if not pathlib.Path(path).exists():
        raise FileNotFoundError(f"The path {path} does not exist. Make sure the"
                                f" tests are run from the root of the project.")
    save_numpy_file(path, data)

    # Load the data
    loaded_data = numpy_file(path)

    # Check the data
    # Check manually because numpy arrays do not use `==`
    assert len(data) == len(loaded_data)
    assert all(
        np.array_equal(data[i][0], loaded_data[i][0])
        and np.array_equal(data[i][1], loaded_data[i][1])
        for i in range(len(data))
    )

