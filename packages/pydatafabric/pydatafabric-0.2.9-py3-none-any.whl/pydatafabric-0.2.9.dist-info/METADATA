Metadata-Version: 2.1
Name: pydatafabric
Version: 0.2.9
Summary: SHINSEGAE DataFabric Python Package
Home-page: https://github.com/emartddt/dataplaltform-python-dist
Author: SHINSEGAE DataFabric
Author-email: admin@shinsegae.ai
License: MIT License
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8,<3.11
Description-Content-Type: text/markdown
Requires-Dist: thrift-sasl (==0.4.3)
Requires-Dist: hvac (==0.11.2)
Requires-Dist: pyhive[hive] (==0.6.4)
Requires-Dist: pyarrow (==6.0.1)
Requires-Dist: pandas
Requires-Dist: slackclient (==2.9.3)
Requires-Dist: httplib2 (==0.20.4)
Requires-Dist: testresources
Requires-Dist: python-dateutil (>=2.8.1)
Requires-Dist: requests (<3.0.0,>=2.26.0)
Requires-Dist: protobuf (>=3.12.0)
Requires-Dist: psycopg2 (<3.0.0)
Requires-Dist: click
Requires-Dist: PyGithub
Requires-Dist: pycryptodome
Requires-Dist: tabulate (==0.8.9)
Requires-Dist: grpcio (==1.43.0)
Requires-Dist: grpcio-status (==1.43.0)
Requires-Dist: sqlalchemy (==1.4.31)
Requires-Dist: packaging
Requires-Dist: tqdm (==4.63.1)
Requires-Dist: ipywidgets
Requires-Dist: hmsclient-hive-3
Requires-Dist: redis
Requires-Dist: s3fs
Requires-Dist: dvc[s3]
Requires-Dist: gcsfs
Requires-Dist: dvc[gs]
Requires-Dist: google-cloud-bigquery (==2.34.2)
Requires-Dist: google-cloud-bigquery-storage (==2.13.0)
Requires-Dist: google-cloud-bigtable (==2.7.1)
Requires-Dist: google-cloud-monitoring (==2.9.1)
Requires-Dist: google-cloud-vision (==2.7.2)
Requires-Dist: google-auth (==2.6.2)
Requires-Dist: google-auth-oauthlib (<0.5,>=0.4.1)
Requires-Dist: google-api-core (==2.7.1)
Requires-Dist: google-api-python-client (==2.42.0)
Requires-Dist: google-cloud-core (==2.2.3)
Requires-Dist: google-cloud-common (==1.0.1)
Requires-Dist: googleapis-common-protos (==1.56.0)
Provides-Extra: emart
Requires-Dist: torch ; extra == 'emart'
Requires-Dist: torchdiffeq ; extra == 'emart'
Requires-Dist: tensorboard (<3.0.0) ; extra == 'emart'
Requires-Dist: seaborn (==0.11.2) ; extra == 'emart'
Requires-Dist: implicit (==0.5.2) ; extra == 'emart'
Requires-Dist: matplotlib (==3.5.1) ; extra == 'emart'
Requires-Dist: openpyxl (==3.0.9) ; extra == 'emart'
Requires-Dist: xgboost (==1.5.2) ; extra == 'emart'
Requires-Dist: scikit-learn (==1.0.2) ; extra == 'emart'
Requires-Dist: bayesian-optimization (==1.2.0) ; extra == 'emart'

# SHINSEGAE DataFabric Python Package

[![Linter && Formatting](https://github.com/emartdt/datafabric-python-dist/actions/workflows/Flake8.yml/badge.svg)](https://github.com/emartdt/datafabric-python-dist/actions/workflows/Flake8.yml)
[![Publish to TestPyPI](https://github.com/emartdt/datafabric-python-dist/actions/workflows/TestPyPI.yml/badge.svg)](https://github.com/emartdt/datafabric-python-dist/actions/workflows/TestPyPI.yml)
[![Publish to PyPI](https://github.com/emartdt/datafabric-python-dist/actions/workflows/PyPI.yml/badge.svg)](https://github.com/emartdt/datafabric-python-dist/actions/workflows/PyPI.yml)

This is highly site dependent package. Resources are abstracted into package structure.

## Usage

Work with spark-bigquery-connector

```python
# SELECT
from pydatafabric.gcp import bq_table_to_pandas

pandas_df = bq_table_to_pandas("dataset", "table_name", ["col_1", "col_2"], "2020-01-01", "cust_id is not null")
# INSERT 
from pydatafabric.gcp import pandas_to_bq_table

pandas_to_bq_table(pandas_df, "dataset", "table_name", "2020-03-01")
```

Send slack message

```python
from pydatafabric.ye import slack_send

text = 'Hello'
username = 'airflow'
channel = '#leavemealone'
slack_send(text=text, username=username, channel=channel)
# Send dataframe as text
df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})
slack_send(text=df, username=username, channel=channel, dataframe=True)
```

Get bigquery client

```python
from pydatafabric.gcp import get_bigquery_client

bq = get_bigquery_client()
bq.query(query)
```

IPython BigQuery Magic

```python
from pydatafabric.gcp import import_bigquery_ipython_magic

import_bigquery_ipython_magic()

query_params = {
    "p_1": "v_1",
    "dataset": "common_dev",
}
```

```python
% % bq - -params $query_params

SELECT
c_1
FROM
{dataset}.user_logs
WHERE
c_1 =


@p_1
```

Use github util

```python
from pydatafabric.ye import get_github_util

g = get_github_util
# query graphql
res = g.query_gql(graph_ql)
# get file in github repository
byte_object = g.download_from_git(github_url_path)
```

## Installation

```sh
$ pip install pydatafabric --upgrade
```

If you would like to install submodules for AIR

```sh
$ pip install pydatafabric[emart] --upgrade
```


