# Generated by Django 3.1.4 on 2021-01-23 16:46

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail_color_panel.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Layout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Layout title for use in Wagtail (not used by Plotly)', max_length=255)),
                ('title_font_family', models.CharField(blank=True, help_text='HTML font family - the typeface that will be applied by the web browser', max_length=255)),
                ('title_font_size', models.PositiveSmallIntegerField(default=24, help_text='number greater than or equal to 1', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(144)])),
                ('title_font_color', wagtail_color_panel.fields.ColorField(default='#444444', max_length=7)),
                ('title_xref', models.CharField(choices=[('container', 'Container'), ('paper', 'Paper')], default='container', help_text='Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.', max_length=10)),
                ('title_yref', models.CharField(choices=[('container', 'Container'), ('paper', 'Paper')], default='container', help_text='Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.', max_length=10)),
                ('title_x', models.FloatField(default=0.5, help_text='Sets the x position with respect to `xref` in normalized coordinates from "0" (left) to "1" (right).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('title_y', models.FloatField(blank=True, help_text='Sets the y position with respect to `yref` in normalized coordinates from "0" (bottom) to "1" (top). An empty value sets y position to "auto" (default) and places the baseline of the title onto the vertical center of the top margin.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('title_xanchor', models.CharField(choices=[('auto', 'Auto'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='auto', help_text='Sets the titles horizontal alignment with respect to its x position. "left" means that the title starts at x, "right" means that the title ends at x and "center" means that the titles center is at x. "auto" divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.', max_length=10)),
                ('title_yanchor', models.CharField(choices=[('auto', 'Auto'), ('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='auto', help_text='Sets the titles vertical alignment with respect to its y position. "top" means that the titles cap line is at y, "bottom" means that the titles baseline is at y and "middle" means that the titles midline is at y. "auto" divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.', max_length=10)),
                ('title_pad_t', models.PositiveSmallIntegerField(default=0, help_text='The amount of padding (in px) along the top of the component')),
                ('title_pad_r', models.PositiveSmallIntegerField(default=0, help_text='The amount of padding (in px) on the right side of the component')),
                ('title_pad_b', models.PositiveSmallIntegerField(default=0, help_text='The amount of padding (in px) along the bottom of the component')),
                ('title_pad_l', models.PositiveSmallIntegerField(default=0, help_text='The amount of padding (in px) on the left side of the component')),
                ('autosize', models.BooleanField(default=True, help_text='Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.')),
                ('width', models.PositiveSmallIntegerField(blank=True, help_text='Sets the plots width (in px)', null=True, validators=[django.core.validators.MinValueValidator(10)])),
                ('height', models.PositiveSmallIntegerField(blank=True, help_text='Sets the plots height (in px)', null=True, validators=[django.core.validators.MinValueValidator(10)])),
                ('paper_bgcolor', wagtail_color_panel.fields.ColorField(default='#FFFFFF', help_text='Sets the background color of the paper where the graph is drawn', max_length=7)),
                ('plot_bgcolor', wagtail_color_panel.fields.ColorField(default='#FFFFFF', help_text='Sets the background color of the plotting area in-between x and y axes', max_length=7)),
                ('xaxis_gridcolor', wagtail_color_panel.fields.ColorField(default='#EEEEEE', help_text='Sets the xaxis grid color', max_length=7)),
                ('yaxis_gridcolor', wagtail_color_panel.fields.ColorField(default='#EEEEEE', help_text='Sets the yaxis grid color', max_length=7)),
                ('font_family', models.CharField(blank=True, default='"Open Sans", verdana, arial, sans-serif', help_text='HTML font family - the typeface that will be applied by the web browser', max_length=255)),
                ('font_size', models.PositiveSmallIntegerField(default=14, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(72)])),
                ('font_color', wagtail_color_panel.fields.ColorField(default='#444444', max_length=7)),
                ('showlegend', models.BooleanField(default=True, help_text='Determines whether or not a legend is drawn. Default is `TRUE` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: TRUE`.')),
                ('legend_bgcolor', wagtail_color_panel.fields.ColorField(default='#FFFFFF', help_text='Sets the legend background color', max_length=7)),
                ('legend_bordercolor', wagtail_color_panel.fields.ColorField(default='#444444', help_text='Sets the color of the border enclosing the legend', max_length=7)),
                ('legend_borderwidth', models.PositiveSmallIntegerField(default=0, help_text='Sets the width (in px) of the border enclosing the legend', validators=[django.core.validators.MaxValueValidator(10)])),
                ('legend_font_family', models.CharField(blank=True, help_text='HTML font family - the typeface that will be applied by the web browser', max_length=255)),
                ('legend_font_size', models.PositiveSmallIntegerField(default=14, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(72)])),
                ('legend_font_color', wagtail_color_panel.fields.ColorField(default='#444444', max_length=7)),
                ('legend_orientation', models.CharField(choices=[('v', 'Vertical'), ('h', 'Horizontal')], default='v', help_text='Sets the orientation of the legend', max_length=1)),
                ('legend_traceorder', models.CharField(choices=[('normal', 'Normal'), ('reversed', 'Reversed'), ('grouped', 'Grouped'), ('reversed+grouped', 'Reversed Grouped')], default='normal', help_text='Determines the order at which the legend items are displayed', max_length=20)),
                ('legend_itemsizing', models.CharField(choices=[('trace', 'Trace'), ('constant', 'Constant')], default='trace', help_text='Determines if the legend items symbols scale with their corresponding "trace" attributes or remain "constant" independent of the symbol size on the graph', max_length=10)),
                ('legend_itemwidth', models.PositiveSmallIntegerField(default=30, help_text='Sets the width (in px) of the legend item symbols', validators=[django.core.validators.MinValueValidator(30)])),
                ('legend_itemclick', models.CharField(blank=True, choices=[('toggle', 'Toggle'), ('toggleothers', 'Toggle others')], default='toggle', help_text='Determines the behavior on legend item click', max_length=20)),
                ('legend_itemdoubleclick', models.CharField(blank=True, choices=[('toggle', 'Toggle'), ('toggleothers', 'Toggle others')], default='toggleothers', help_text='Determines the behavior on legend item double-click', max_length=20)),
                ('legend_x', models.FloatField(blank=True, help_text='Sets the x position (in normalized coordinates) of the legend. Defaults to "1.02" for vertical legends and defaults to "0" for horizontal legends.', null=True, validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(3)])),
                ('legend_xanchor', models.CharField(choices=[('auto', 'Auto'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Sets the titles horizontal alignment with respect to its x position. "left" means that the title starts at x, "right" means that the title ends at x and "center" means that the titles center is at x. "auto" divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.', max_length=10)),
                ('legend_y', models.FloatField(blank=True, help_text='Sets the y position (in normalized coordinates) of the legend. Defaults to "1" for vertical legends, defaults to "-0.1" for horizontal legends.', null=True, validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(3)])),
                ('legend_yanchor', models.CharField(choices=[('auto', 'Auto'), ('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='auto', help_text='Sets the legends vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the legend. Value "auto" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.', max_length=10)),
                ('legend_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', help_text='Sets the vertical alignment of the symbols with respect to their associated text', max_length=10)),
                ('legend_title_text', models.CharField(blank=True, help_text='Sets the title of the legend', max_length=255)),
                ('legend_title_side', models.CharField(blank=True, choices=[('top', 'Top'), ('left', 'Left'), ('top left', 'Top Left')], help_text='Determines the location of legends title with respect to the legend items. Defaulted to "top" with `orientation` is "h". Defaulted to "left" with `orientation` is "v". The "top left" options could be used to expand legend area in both x and y sides.', max_length=10)),
                ('legend_title_font_family', models.CharField(blank=True, help_text='HTML font family - the typeface that will be applied by the web browser', max_length=255)),
                ('legend_title_font_size', models.PositiveSmallIntegerField(default=18, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(72)])),
                ('legend_title_font_color', wagtail_color_panel.fields.ColorField(default='#444444', max_length=7)),
                ('margin_l', models.PositiveSmallIntegerField(default=80, help_text='Sets the left margin (in px)')),
                ('margin_r', models.PositiveSmallIntegerField(default=80, help_text='Sets the right margin (in px)')),
                ('margin_t', models.PositiveSmallIntegerField(default=100, help_text='Sets the top margin (in px)')),
                ('margin_b', models.PositiveSmallIntegerField(default=80, help_text='Sets the bottom margin (in px)')),
                ('margin_pad', models.PositiveSmallIntegerField(blank=True, help_text='Sets the amount of padding (in px) between the plotting area and the axis lines', null=True)),
                ('margin_autoexpand', models.BooleanField(default=True, help_text='Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.')),
            ],
        ),
        migrations.CreateModel(
            name='Palette',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('color', wagtail_color_panel.fields.ColorField(max_length=7)),
                ('palette', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='colors', to='wagtail_plotly.palette')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
