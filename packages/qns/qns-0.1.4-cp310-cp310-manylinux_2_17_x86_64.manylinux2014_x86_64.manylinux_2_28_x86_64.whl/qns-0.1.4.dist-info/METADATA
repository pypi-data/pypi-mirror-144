Metadata-Version: 2.1
Name: qns
Version: 0.1.4
Summary: A discrete-event scheduler designed for quantum networks
Home-page: https://github.com/ertuil/SimQN
Author: elliot
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy

# SimQN

![Pytest](https://github.com/ertuil/SimQN/actions/workflows/pytest.yml/badge.svg) 
![Flake8](https://github.com/ertuil/SimQN/actions/workflows/flake8.yml/badge.svg) 

Welcome to SimQN's documentation. SimQN is a discrete-event based network simulation platform for quantum networks.
SimQN enables large-scale investigations, including QKD protocols, entanglement distributions protocols, and routing algorithms, resource allocation schemas in quantum networks. For example, users can use SimQN to design routing algorithms for better QKD performance. For more information, please refer to the [Documents](https://ertuil.github.io/SimQN/).

SimQN is a Python3 library for quantum networking simulation. It is designed to be general propose. It means that SimQN can be used for both QKD network, entanglement distribution network and other kinds of quantum networks' evaluation. The core idea is that SimQN makes no architecture assumption. Since there is currently no recognized network architecture in quantum networks investigations, SimQN stays flexible in this aspect.

SimQN provides high performance for large-scale network simulation. SimQN use Cython to compile critical codes in C/C++ libraries to boost the evaluation. Also, along with the common used quantum state based physical models, SimQN provides a higher-layer fidelity based entanglement physical model to reduce the computation overhead and brings convenience for users in evaluation. Last but not least, SimQN provides several network auxiliary models for easily building network topologies, producing routing tables and managing multiple session requests.

## Get Help

- This [documentation](https://ertuil.github.io/SimQN/) may answer most questions.
    - The [tutorial](https://ertuil.github.io/SimQN/tutorials.html) here presents how to use SimQN.
    - The [API manual](https://ertuil.github.io/SimQN/modules.html) shows more detailed information.
- Welcome to report bugs at [Github](https://github.com/ertuil/SimQN).

## Installation

Install and update using `pip`:
```
pip3 install -U qns
```

# First sight of SimQN

Here is an example of using SimQN.

``` Python

    from qns.simulator.simulator import Simulator
    from qns.network.topology import RandomTopology
    from qns.network.protocol.entanglement_distribution import EntanglementDistributionApp
    from qns.network import QuantumNetwork
    from qns.network.route.dijkstra import DijkstraRouteAlgorithm
    from qns.network.topology.topo import ClassicTopology
    import qns.utils.log as log

    init_fidelity = 0.99 # the initial entanglement's fidelity 
    nodes_number = 150 # the number of nodes
    lines_number = 450 # the number of quantum channels
    qchannel_delay = 0.05 # the delay of quantum channels
    cchannel_delay = 0.05 # the delay of classic channels
    memory_capacity = 50 # the size of quantum memories
    send_rate = 10 # the send rate
    requests_number = 10 # the number of sessions (SD-pairs)

    # generate the simulator
    s = Simulator(0, 10, accuracy=1000000)

    # set the log's level
    log.logger.setLevel(logging.INFO)
    log.install(s)

    # generate a random topology using the parameters above
    # each node will install EntanglementDistributionApp for hop-by-hop entanglement distribution
    topo = RandomTopology(nodes_number=nodes_number,
        lines_number=lines_number,
        qchannel_args={"delay": qchannel_delay},
        cchannel_args={"delay": cchannel_delay},
        memory_args=[{"capacity": memory_capacity}],
        nodes_apps=[EntanglementDistributionApp(init_fidelity=init_fidelity)])

    # build the network, with Dijkstra's routing algorithm
    net = QuantumNetwork( topo=topo, classic_topo=ClassicTopology.All, route=DijkstraRouteAlgorithm())

    # build the routing table
    net.build_route()

    # randomly select multiple sessions (SD-pars)
    net.random_requests(requests_number, attr={"send_rate": send_rate})

    # all entities in the network will install the simulator and do initiate works.
    net.install(s)

    # run simulation
    s.run()

    # count the number of successful entanglement distribution for each session
    results = [src.apps[0].success_count for req in net.requests]

    # log the results
    log.monitor(requests_number, nodes_number, results, s.time_spend, sep=" ")
```

# Contributing
Welcome to contribute through Github Issue or Pull Requests. Please refer to the [develop guide](https://ertuil.github.io/SimQN/develop.html).


