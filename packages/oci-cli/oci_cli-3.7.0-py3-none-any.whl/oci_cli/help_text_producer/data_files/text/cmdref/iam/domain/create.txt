"create"
********

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Examples


Description
===========

Creates a new domain in the tenancy with domain home in {@code
homeRegion}. This is an asynchronous call - where, at start, {@code
lifecycleState} of this domain is set to CREATING and {@code
lifecycleDetails} to UPDATING. On domain creation completion this
Domain’s {@code lifecycleState} will be set to ACTIVE and {@code
lifecycleDetails} to null.

To track progress, HTTP GET on /iamWorkRequests/{iamWorkRequestsId}
endpoint will provide the async operation’s status.

After creating a *Domain*, make sure its *lifecycleState* changes from
CREATING to ACTIVE before using it. If the domain’s {@code
displayName} already exists, returns 400 BAD REQUEST. If any one of
admin related fields are provided and one of the following 3 fields -
{@code adminEmail}, {@code adminLastName} and {@code adminUserName} -
is not provided, returns 400 BAD REQUEST. - If {@code
isNotificationBypassed} is NOT provided when admin information is
provided, returns 400 BAD REQUEST. - If any internal error occurs,
return 500 INTERNAL SERVER ERROR.


Usage
=====

   oci iam domain create [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of the Compartment where domain is created

--description [text]

Domain entity description

--display-name [text]

The mutable display name of the domain.

--home-region [text]

The region’s name identifier. See Regions and Availability Domains for
the full list of supported region names.

Example:

   us-phoenix-1

--license-type [text]

The License type of Domain


Optional Parameters
===================

--admin-email [text]

The admin email address

--admin-first-name [text]

The admin first name

--admin-last-name [text]

The admin last name

--admin-user-name [text]

The admin user name

--defined-tags [complex type]

Defined tags for this resource. Each key is predefined and scoped to a
namespace. For more information, see Resource Tags. Example:
*{“Operations”: {“CostCenter”: “42”}}* This is a complex type whose
value must be valid JSON. The value can be provided as a string on the
command line or passed in as a file using the file://path/to/file
syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--freeform-tags [complex type]

Free-form tags for this resource. Each tag is a simple key-value pair
with no predefined name, type, or namespace. For more information, see
Resource Tags. Example: *{“Department”: “Finance”}* This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-hidden-on-login [boolean]

Indicates whether domain is hidden on login screen or not.

--is-notification-bypassed [boolean]

Indicates if admin user created in IDCS stripe would like to receive
notification like welcome email or not. Required field only if admin
information is provided, otherwise optional.

--is-primary-email-required [boolean]

Optional field to indicate whether users in the domain are required to
have a primary email address or not Defaults to true

--max-wait-seconds [integer]

The maximum time to wait for the work request to reach the state
defined by "--wait-for-state". Defaults to 1200 seconds.

--wait-for-state [text]

This operation asynchronously creates, modifies or deletes a resource
and uses a work request to track the progress of the operation.
Specify this option to perform the action and then wait until the work
request reaches a certain state. Multiple states can be specified,
returning on the first state. For example, "--wait-for-state"
SUCCEEDED "--wait-for-state" FAILED would return on whichever
lifecycle state is reached first. If timeout is reached, a return code
of 2 is returned. For any other error, a return code of 1 is returned.

Accepted values are:

   ACCEPTED, CANCELED, CANCELING, FAILED, IN_PROGRESS, SUCCEEDED

--wait-interval-seconds [integer]

Check every "--wait-interval-seconds" to see whether the work request
to see if it has reached the state defined by "--wait-for-state".
Defaults to 30 seconds.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--max-retries", "--no-retry", "--opc-client-request-
id", "--opc-request-id", "--output", "--profile", "--query", "--raw-
output", "--region", "--release-info", "--request-id", "--version",
"-?", "-d", "-h", "-v"


Examples
========

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/iam/domain/create.html#cmdoption-compartment-id
       export description=<substitute-value-of-description> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/iam/domain/create.html#cmdoption-description
       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/iam/domain/create.html#cmdoption-display-name
       export home_region=<substitute-value-of-home_region> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/iam/domain/create.html#cmdoption-home-region
       export license_type=<substitute-value-of-license_type> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/iam/domain/create.html#cmdoption-license-type

       oci iam domain create --compartment-id $compartment_id --description $description --display-name $display_name --home-region $home_region --license-type $license_type
