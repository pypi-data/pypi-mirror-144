# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: feedback_interface.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x18\x66\x65\x65\x64\x62\x61\x63k_interface.proto\x12\nfeedbackif\"F\n\x13\x46\x65\x65\x64\x62\x61\x63kDataRequest\x12\x14\n\x0cprocess_list\x18\x01 \x03(\t\x12\x19\n\x11standalone_worker\x18\x02 \x01(\t\"V\n\x14\x46\x65\x65\x64\x62\x61\x63kDataResponse\x12-\n\x04\x64\x61ta\x18\x01 \x03(\x0b\x32\x1f.feedbackif.ProcessFeedbackData\x12\x0f\n\x07holdoff\x18\x02 \x01(\x08\"h\n\x13ProcessFeedbackData\x12\x14\n\x0cprocess_name\x18\x01 \x01(\t\x12\x15\n\rprocess_state\x18\x02 \x01(\r\x12\x11\n\tcpu_usage\x18\x03 \x01(\x02\x12\x11\n\tmem_usage\x18\x04 \x01(\r\"\x12\n\x10TerminateRequest\"\x13\n\x11TerminateResponse2\xb7\x01\n\x11\x46\x65\x65\x64\x62\x61\x63kInterface\x12V\n\x0fGetFeedbackData\x12\x1f.feedbackif.FeedbackDataRequest\x1a .feedbackif.FeedbackDataResponse\"\x00\x12J\n\tTerminate\x12\x1c.feedbackif.TerminateRequest\x1a\x1d.feedbackif.TerminateResponse\"\x00\x62\x06proto3')



_FEEDBACKDATAREQUEST = DESCRIPTOR.message_types_by_name['FeedbackDataRequest']
_FEEDBACKDATARESPONSE = DESCRIPTOR.message_types_by_name['FeedbackDataResponse']
_PROCESSFEEDBACKDATA = DESCRIPTOR.message_types_by_name['ProcessFeedbackData']
_TERMINATEREQUEST = DESCRIPTOR.message_types_by_name['TerminateRequest']
_TERMINATERESPONSE = DESCRIPTOR.message_types_by_name['TerminateResponse']
FeedbackDataRequest = _reflection.GeneratedProtocolMessageType('FeedbackDataRequest', (_message.Message,), {
  'DESCRIPTOR' : _FEEDBACKDATAREQUEST,
  '__module__' : 'feedback_interface_pb2'
  # @@protoc_insertion_point(class_scope:feedbackif.FeedbackDataRequest)
  })
_sym_db.RegisterMessage(FeedbackDataRequest)

FeedbackDataResponse = _reflection.GeneratedProtocolMessageType('FeedbackDataResponse', (_message.Message,), {
  'DESCRIPTOR' : _FEEDBACKDATARESPONSE,
  '__module__' : 'feedback_interface_pb2'
  # @@protoc_insertion_point(class_scope:feedbackif.FeedbackDataResponse)
  })
_sym_db.RegisterMessage(FeedbackDataResponse)

ProcessFeedbackData = _reflection.GeneratedProtocolMessageType('ProcessFeedbackData', (_message.Message,), {
  'DESCRIPTOR' : _PROCESSFEEDBACKDATA,
  '__module__' : 'feedback_interface_pb2'
  # @@protoc_insertion_point(class_scope:feedbackif.ProcessFeedbackData)
  })
_sym_db.RegisterMessage(ProcessFeedbackData)

TerminateRequest = _reflection.GeneratedProtocolMessageType('TerminateRequest', (_message.Message,), {
  'DESCRIPTOR' : _TERMINATEREQUEST,
  '__module__' : 'feedback_interface_pb2'
  # @@protoc_insertion_point(class_scope:feedbackif.TerminateRequest)
  })
_sym_db.RegisterMessage(TerminateRequest)

TerminateResponse = _reflection.GeneratedProtocolMessageType('TerminateResponse', (_message.Message,), {
  'DESCRIPTOR' : _TERMINATERESPONSE,
  '__module__' : 'feedback_interface_pb2'
  # @@protoc_insertion_point(class_scope:feedbackif.TerminateResponse)
  })
_sym_db.RegisterMessage(TerminateResponse)

_FEEDBACKINTERFACE = DESCRIPTOR.services_by_name['FeedbackInterface']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _FEEDBACKDATAREQUEST._serialized_start=40
  _FEEDBACKDATAREQUEST._serialized_end=110
  _FEEDBACKDATARESPONSE._serialized_start=112
  _FEEDBACKDATARESPONSE._serialized_end=198
  _PROCESSFEEDBACKDATA._serialized_start=200
  _PROCESSFEEDBACKDATA._serialized_end=304
  _TERMINATEREQUEST._serialized_start=306
  _TERMINATEREQUEST._serialized_end=324
  _TERMINATERESPONSE._serialized_start=326
  _TERMINATERESPONSE._serialized_end=345
  _FEEDBACKINTERFACE._serialized_start=348
  _FEEDBACKINTERFACE._serialized_end=531
# @@protoc_insertion_point(module_scope)
