# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import feedback_interface_pb2 as feedback__interface__pb2


class FeedbackInterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeedbackData = channel.unary_unary(
                '/feedbackif.FeedbackInterface/GetFeedbackData',
                request_serializer=feedback__interface__pb2.FeedbackDataRequest.SerializeToString,
                response_deserializer=feedback__interface__pb2.FeedbackDataResponse.FromString,
                )
        self.Terminate = channel.unary_unary(
                '/feedbackif.FeedbackInterface/Terminate',
                request_serializer=feedback__interface__pb2.TerminateRequest.SerializeToString,
                response_deserializer=feedback__interface__pb2.TerminateResponse.FromString,
                )


class FeedbackInterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFeedbackData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FeedbackInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFeedbackData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeedbackData,
                    request_deserializer=feedback__interface__pb2.FeedbackDataRequest.FromString,
                    response_serializer=feedback__interface__pb2.FeedbackDataResponse.SerializeToString,
            ),
            'Terminate': grpc.unary_unary_rpc_method_handler(
                    servicer.Terminate,
                    request_deserializer=feedback__interface__pb2.TerminateRequest.FromString,
                    response_serializer=feedback__interface__pb2.TerminateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'feedbackif.FeedbackInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FeedbackInterface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFeedbackData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/feedbackif.FeedbackInterface/GetFeedbackData',
            feedback__interface__pb2.FeedbackDataRequest.SerializeToString,
            feedback__interface__pb2.FeedbackDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Terminate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/feedbackif.FeedbackInterface/Terminate',
            feedback__interface__pb2.TerminateRequest.SerializeToString,
            feedback__interface__pb2.TerminateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
